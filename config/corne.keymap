/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt { tapping-term-ms = <210>; };

/ {
    macros {
        fivethreeone: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap_time 45>,
                <&kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1 &kp N5 &kp N3 &kp N1>;

            label = "NEW_MACRO";
        };

        xtwo: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&fivethreeone &fivethreeone>;
            label = "NEW_MACRO";
        };

        xfour: xfour {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&xtwo &xtwo>;
            label = "XFOUR";
        };

        xeight: xeight {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&xfour &xfour>;
            label = "XEIGHT";
        };

        xsixteen: xsixteen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&xeight &xeight>;
            label = "XSIXTEEN";
        };

        xthirtytwo: xthirtytwo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&xsixteen &xsixteen>;
            label = "XTHIRTYTWO";
        };

        xsixtyfour: xsixtyfour {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&xthirtytwo &xthirtytwo>;
            label = "XSIXTYFOUR";
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-caps-word";
            label = "NEW_BEHAVIOR";
            #binding-cells = <0>;
            continue-list = <SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R  &kp T            &kp Y        &kp U  &kp I            &kp O    &kp P     &kp LEFT_GUI
&mo 6      &kp A  &kp S  &kp D      &kp F  &kp G            &kp H        &kp J  &kp K            &kp L    &kp SEMI  &kp RIGHT_SHIFT
&kp LCTRL  &kp Z  &kp X  &kp C      &kp V  &kp B            &kp N        &kp M  &kp COMMA        &kp DOT  &kp FSLH  &kp ESC
                         &kp LC(C)  &mo 3  &kp BACKSPACE    &lt 1 SPACE  &mo 2  &mt RSHFT ENTER
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp RIGHT_ALT  &kp DEL          &kp DEL    &kp CAPS       &kp C_VOL_UP    &kp PAGE_UP       &kp HOME        &kp UP_ARROW    &kp END    &tog 4  &kp LEFT_GUI
&kp LSHFT  &kp INS        &kp LC(S)        &kp LC(Z)  &kp LC(A)      &kp C_VOL_DN    &kp PAGE_DOWN     &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &tog 5  &trans
&kp LCTRL  &kp LG(LS(S))  &kp PRINTSCREEN  &kp LC(Y)  &kp LS(LC(Z))  &kp C_MUTE      &kp C_PLAY_PAUSE  &kp C_PREV      &kp C_NEXT      &trans     &trans  &kp ESCAPE
                                           &kp LGUI   &kp LCTRL      &kp SPACE       &kp SPACE         &trans          &kp RET
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans          &trans    &kp AT             &kp MINUS        &kp GRAVE              &kp PRCNT        &kp CARET  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp DOLLAR     &kp COMMA  &kp LEFT_GUI
&kp LEFT_SHIFT  &kp EXCL  &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp ASTRK        &kp PLUS   &kp AMPERSAND      &kp PIPE          &kp BACKSLASH  &kp EQUAL  &kp COLON
&kp LCTRL       &trans    &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp TILDE        &kp HASH   &kp UNDER          &kp LT            &kp GT         &kp SLASH  &xsixtyfour
                                             &trans           &trans                 &kp BACKSPACE    &kp SPACE  &trans             &kp RET
            >;
        };

        layer_3 {
            bindings = <
&bootloader     &trans          &kp AT    &kp MINUS        &kp GRAVE              &kp PERCENT    &kp CARET  &kp N7  &kp N8   &kp N9  &kp COMMA  &trans
&kp LEFT_SHIFT  &kp EXCL        &kp LBKT  &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp ASTRK      &kp PLUS   &kp N4  &kp N5   &kp N6  &kp EQUAL  &kp COLON
&kp LCTRL       &kp LEFT_ARROW  &kp RBKT  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp TILDE      &kp HASH   &kp N1  &kp N2   &kp N3  &kp SLASH  &trans
                                          &kp ENTER        &trans                 &kp BSPC       &kp SPACE  &kp N0  &kp DOT
            >;
        };

        layer_4 {
            bindings = <
&trans          &kp F1  &kp F2   &kp F3   &kp F4    &kp C_BRI_UP     &trans  &bt BT_NXT  &trans  &trans  &trans  &tog 4
&kp LEFT_SHIFT  &kp F5  &kp F6   &kp F7   &kp F8    &kp C_BRI_DEC    &trans  &bt BT_PRV  &trans  &trans  &trans  &bt BT_CLR
&kp LCTRL       &kp F9  &kp F10  &kp F11  &kp F12   &trans           &trans  &trans      &trans  &trans  &trans  &bootloader
                                 &trans   &kp LALT  &trans           &trans  &trans      &trans
            >;
        };

        layer_5 {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R         &kp T            &kp Y      &kp U         &kp I      &kp O    &kp P     &tog 5
&kp LCTRL  &kp A  &kp S  &kp D         &kp F         &kp G            &kp H      &kp J         &kp K      &kp L    &kp SEMI  &kp RIGHT_SHIFT
&kp LSHFT  &kp Z  &kp X  &kp C         &kp V         &kp B            &kp N      &kp M         &kp COMMA  &kp DOT  &kp FSLH  &kp ESC
                         &kp NUMBER_1  &kp NUMBER_2  &kp BACKSPACE    &kp SPACE  &kp NUMBER_3  &kp ENTER
            >;
        };

        layer_7 {
            bindings = <
&kp RG(RS(GRAVE))  &kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)       &kp LS(Y)      &kp LS(U)   &kp LS(I)    &kp LS(O)   &kp LS(P)      &trans
&trans             &kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)       &kp LS(H)      &kp LS(J)   &kp LS(K)    &kp LS(L)   &kp LS(COLON)  &kp RS(SQT)
&trans             &kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)       &kp LS(N)      &kp LS(M)   &kp LS(LT)   &kp LS(GT)  &kp LS(QMARK)  &trans
                                         &kp LC(X)  &kp LC(V)  &kp LC(BSPC)    &kp LS(SPACE)  &caps_word  &kp LS(RET)
            >;
        };
    };
};
